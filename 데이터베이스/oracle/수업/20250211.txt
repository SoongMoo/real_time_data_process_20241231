-- 50인 부서의 최소 급여
select min(salary) from hr.employees where department_id = 50; -- 2100
-- IT_PROG인 직무를 가진 사원들의 급여
select salary from hr.employees where job_id = 'IT_PROG';

-- 50인 부서의 최소 급여와 같은 급여를 받는 직원들은?
select * from hr.employees 
where salary = (select min(salary) from hr.employees where department_id = 50);
                 --- 단일행 서브쿼리

-- IT_PROG인 직무를 가진 사원들의 급여와 같은 급여를 받는 직원들은?
select * from hr.employees where salary in (9000, 6000, 4800, 4800, 4200);
select * from hr.employees 
where salary in (select salary from hr.employees where job_id = 'IT_PROG');
                 ---- 다중행 서브쿼리
                 
--- 다중 서브쿼리 : 다중행 연산자 : in , < any
--- 직무가 FI_ACCOUNT인 사원의 급여를 출력
select salary from hr.employees where job_id = 'FI_ACCOUNT';
--- 9000,8200,7700,7800,6900
--- 직무가 FI_ACCOUNT인 사원의 급여중 제일 많이 받는 급여보다 작게 받는 직원은?
select * from hr.employees 
where salary < any (9000,8200,7700,7800,6900);

select * from hr.employees 
where salary < any (select salary from hr.employees where job_id = 'FI_ACCOUNT');
-- < any :  다중행에서 큰값보다 작은 값에 대한 것 : 예제에서는 9000보다 작은 값

--- 직무가 FI_ACCOUNT인 사원의 급여중 제일 적게 받는 급여보다 많이 받는 직원은?
select * from hr.employees 
where salary > any (select salary from hr.employees where job_id = 'FI_ACCOUNT');
-- > any : 다중행에서 작은 값보다 큰값에 대한 것 : 예제에서 6900보다 큰 값

--- 직무가 FI_ACCOUNT인 사원의 급여와 같은 급여를 받는 직원?
select * from hr.employees 
where salary in (select salary from hr.employees where job_id = 'FI_ACCOUNT');
select * from hr.employees 
where salary = any (select salary from hr.employees where job_id = 'FI_ACCOUNT');
-- 같다. in : = any

select salary from hr.employees where job_id = 'FI_ACCOUNT';
--- 9000,8200,7700,7800,6900
--- 큰값보다 더 크다 : > all
--- 작은 값보다 더 작다 : < all
select * from hr.employees where salary > all (9000,8200,7700,7800,6900) ;
select * from hr.employees 
where salary > all (select salary from hr.employees where job_id = 'FI_ACCOUNT') ;
--- 9000,8200,7700,7800,6900중에서 9000보다 더 큰값을 받는 직원들 

select * from hr.employees where salary < all (9000,8200,7700,7800,6900) ;
--- 9000,8200,7700,7800,6900에서 6900보다 더 작은 값을 받는 직원
select * from hr.employees 
where salary < all (select salary from hr.employees where job_id = 'FI_ACCOUNT') ;

---  다중행 연산자.
--- > any :  여러개의 값들 중에서 작은 값보다 큰 값
--- < any : 여러개의 값들 중에서 큰 값보다 작은 값
--- = any : in
--- > all : 여러개의 값들 중에서 큰 값보다 큰 값
--- < all : 여러개의 값들 중에서 작은 값보다 작은 값

--------------------------------------------------------------------
--------------------------------------------------------------------
--- 부하직원이 있는 직원을 모두 구하시오.
select * from hr.employees;

select manager_id from hr.employees;
select * from hr.employees 
where employee_id in (select distinct manager_id from hr.employees);

-- 부하직원이 없는 직원들을 구하시오..
select * from hr.employees 
where employee_id not in (select distinct manager_id from hr.employees);

select * from hr.employees 
where employee_id not in (select distinct manager_id from hr.employees
                          where manager_id is not null);
-- 서브쿼리 결과에 null 값이 포함되어 있어 결과가 안 나올 수 있다.
-- 이런 경우에는 null값을 제외한 나머지로 값을 가져오도록해야 한다.


------------------------------------------------------------
--- 집합 연산자 
------------------------------------------------------------
-- 직무가 'ST_CLERK'와 'PU_CLERK'에 해당하는 급여를 출력하시오.
select salary from hr.employees where job_id in ('ST_CLERK', 'PU_CLERK');

--- A집합
select salary from hr.employees where job_id = 'ST_CLERK';
--  B집합
select salary from hr.employees where job_id = 'PU_CLERK';

-- 합집합
select salary from hr.employees where job_id = 'ST_CLERK'
union --  중복이 제거 된다.
select salary from hr.employees where job_id = 'PU_CLERK';

select distinct salary from hr.employees where job_id in ('ST_CLERK', 'PU_CLERK');

select salary from hr.employees where job_id in ('ST_CLERK', 'PU_CLERK');

select salary from hr.employees where job_id = 'ST_CLERK'
union all
select salary from hr.employees where job_id = 'PU_CLERK';

select salary from hr.employees where job_id in ('ST_CLERK', 'PU_CLERK','IT_PROG');
--- 합집합
select salary from hr.employees
where job_id = 'ST_CLERK'
union
select salary from hr.employees
where job_id = 'PU_CLERK'
union 
select salary from hr.employees
where job_id = 'IT_PROG';

--- 교집합 : intersect
select salary from hr.employees
where job_id = 'ST_CLERK'
intersect
select salary from hr.employees
where job_id = 'PU_CLERK';

--- 차집합 : minus
select salary from hr.employees
where job_id = 'ST_CLERK'
minus
select salary from hr.employees
where job_id = 'PU_CLERK';

--- job_history에서 employee_id, job_id를 출력하고 employees에서도 employee_id, job_id을 출력
--- 다른 테이블로 부터 같은 종류의 데이터를 가져오기 위해서 사용하는 것이 집합연산자이다.
select employee_id, job_id from hr.job_history
union
select employee_id, job_id from hr.employees;


--- 50, 90, 80 인 부서에 해당하는 employee_id, job_id, department_id를 
--- job_history테이블과 employees테이블에서 가져오시오.
select employee_id, job_id, department_id
from hr.employees
where department_id in (50, 90 , 80)
union 
select employee_id, job_id, department_id
from hr.job_history
where department_id in (50, 90 , 80);
------------------------------------------------------------------------
  ---      1              2           3
select department_id, hire_date, employee_id
from hr.employees
where department_id in (50, 90 , 80)
union 
-----      1             2            3
select employee_id, END_DATE, department_id
from hr.job_history
where department_id in (50, 90 , 80);
---- 같은 열 번호에 해당하는 컬럼들은 같은 유형의 데이터이어야 한다.
---  heading name은 첫번째 쿼리문의 열이름을 따른다.

select department_id, hire_date, email 
from hr.employees
where department_id in (50, 90 , 80)
union 
select employee_id, END_DATE, department_id
from hr.job_history
where department_id in (50, 90 , 80);
-- 같은 열번호에 해당하는 컬럼의 유형이 다르면 오류 발생

select department_id,to_date(null) as  dt,     email 
from hr.employees
where department_id in (50, 90 , 80)
union 
select employee_id, END_DATE, to_char(null)
from hr.job_history
where department_id in (50, 90 , 80);
----------------------------------------------------------------------------

select employee_id, job_id, salary
from hr.employees
union
select employee_id, job_id, 0
from hr.job_history;

----- union 응용
-- 회원테이블(members)  : user_id , user_pw, user_name , user_phone
-- 관리테이블(employees): emp_id, emp_pw , emp_eamil   , emp_phone 
--- 아이디가 highland0 일때
select user_id , user_pw, user_name , user_phone 
from members 
where user_id = 'highland0';

select emp_id, emp_pw , emp_eamil   , emp_phone 
from emoployees
where emp_id = 'highland0';


select user_id , user_pw, user_name , user_phone 
from members 
where user_id = 'highland0'
union
select emp_id, emp_pw , emp_eamil   , emp_phone 
from emoployees
where emp_id = 'highland0';

--- DML : C(insert) R(select) U(update) D(delete)
create table employees
as 
select * from hr.employees;

select * from employees;

drop table employees; -- table 삭제

select * from hr.employees
where 1=2;

create table employees
as
select * from hr.employees
where 1=2;

desc employees;  
select * from employees;

select * from hr.departments;

create table departments
as
select * from hr.departments
where 1=2;

desc hr.departments;
desc departments;

insert into departments (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
values(70, 'Public Relations', 100, 1700);
select * from departments;

ROLLBACK; --- DML문의 실행을 취소한다.

insert into departments (DEPARTMENT_NAME, DEPARTMENT_ID, LOCATION_ID,  MANAGER_ID)
values('Public Relations', 70, 1700, 100);
--- insert할 때 컬럼의 순서는 중요하지 않고 1대1 대응하도록 값을 적어준다.
select * from departments;

insert into departments (DEPARTMENT_NAME, DEPARTMENT_ID)
values('Purchasing', 30); --- 원하는 컬럼에만 값을 부여할 수 있다.
select * from departments;

insert into departments (DEPARTMENT_NAME, DEPARTMENT_ID, LOCATION_ID,  MANAGER_ID)
values('Finance' , 100, null, null);
select * from departments;

insert into departments --- 테이블에 정의된 순서 대로 값을 넣어야 한다.
values(80, 'Sales', 145, 2500);

commit;
--------------------------------------------------
alter table departments
add (aaa integer);

insert into departments (DEPARTMENT_NAME, DEPARTMENT_ID, LOCATION_ID,  MANAGER_ID)
values('Finance' , 100, null, null);

insert into departments --- 테이블에 정의된 순서 대로 값을 넣어야 한다.
values(80, 'Sales', 145, 2500);

ROLLBACK;
select * from departments;

alter table departments
drop column aaa;

desc departments;

--- 
desc employees;
-- employee_id, first_name, last_name, email, phone_number, hire_date, job_id
-- salary, commission_pct, manager_id, department_id
select * from hr.employees where employee_id = 113;
insert into employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id
                      ,salary, commission_pct, manager_id, department_id)
values(113, 'Luis', 'Popp','LPOPP' ,'515.124.4567', '07/12/07', 'FI_ACCOUNT',6900,null,108,100);

select * from employees;

select * from hr.employees where employee_id = 114;
--- 입사일이 07일 12월 02년으로 입력해야 한다.
insert into employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id
                      ,salary, commission_pct, manager_id, department_id)
values(114, 'Den', 'Raphaely', 'DRAPHEAL', '515.127.4561' ,to_date('07-12-02','dd-mm-yy')
        , 'PU_MAN', 11000, null, 100, 30);

select * from hr.employees where employee_id = 115;
---  입사일을 현재날짜로 입력하시오.
insert into employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id
                      ,salary, commission_pct, manager_id, department_id)
values(115, 'Alexander', 'Khoo', 'AKHOO', '515.127.4562', sysdate, 'PU_CLERK', 3100, null, 114, 30);                
select * from employees;

---- 행 삭제
delete from employees
where employee_id = 114; -- 조건에 해당되는 행만 지워진다.

select * from employees;
delete from employees; --- 조건이 없으면 다 지워진다

---- insert에 서브쿼리 사용
--- hr.departments에서 부서장이 null이 아닌 부서를 출력하시오.-- department_id, department_name
select department_id, department_name
from hr.departments
where manager_id is not null;

insert into departments(department_id, department_name)
select department_id, department_name
from hr.departments
where manager_id is not null;

--- 113, 114, 115
insert into employees
select * from hr.employees where employee_id in (113,114,115);

select * from employees;

--- hr.employees에서 'AD'로 시작하는 직무를 가진 직원들을 내 테이블에 입력하세요.
insert into employees
select * from hr.employees
where job_id like 'AD%';

---- 'AD'로 시작하는 직무를 가진 직원들을 내 테이블에 삭제 하시오
select * from employees;
delete from employees
where job_id like 'AD%';

select * from employees;

commit;
--- 115번 사원의 입사일을 현재날짜로 변경
update employees
set hire_date = sysdate
where employee_id = 115;

select * from employees;

ROLLBACK;

update employees
set hire_date = sysdate;

--- 114번 직원의 부서를 60번 부서번호로 변경하시오.
update employees
set department_id = 60
where employee_id = 114;

select * from employees;


--- 30인 부서의 직원들을 모두 80부서번호로 변경하시오.
update employees
set department_id = 80
where department_id = 30;

select * from employees;

update employees
set hire_date = sysdate, department_id = 70
where employee_id = 115;
select * from employees;

-- hr.employees 에 있는 104번직원 직무번호 와 105번 직원의 급여를 
-- employees에 있는 114번 직원에 적용하시오.
update employees
set job_id = (select job_id from hr.employees where employee_id = 104)
   ,salary = (select salary from hr.employees where employee_id = 105)
where employee_id = 114;
select * from employees;

--- hr.employees에서 'IT'로 시작하는 직무번호를 가진 직원의 부서를 employees에서 삭제하시오
delete from employees
where department_id in (select department_id from hr.employees where job_id like 'IT%');
select * from employees;
commit;



