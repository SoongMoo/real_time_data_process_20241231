/*
MEMBERS
user_num          not null          VARCHAR2(20)  
USER_ID     	NOT NULL 	VARCHAR2(20)  
USER_PW     	NOT NULL 	VARCHAR2(200) 
USER_NAME   	NOT NULL 	VARCHAR2(40)  
USER_BIRTH  	NOT NULL 	TIMESTAMP 
USER_GENDER 	NOT NULL 	VARCHAR2(1)   
USER_ADDR   	NOT NULL 	VARCHAR2(200) 
USER_PH1    	NOT NULL 	VARCHAR2(13)  
USER_PH2             		VARCHAR2(13)  
USER_REGIST          		TIMESTAMP  
USER_EMAIL           		VARCHAR2(200) 
JOIN_OK              			VARCHAR2(500)
*/
drop table MEMBERS;
create table MEMBERS(
    user_num VARCHAR2(20) not null,
    USER_ID VARCHAR2(20)  not null,
    USER_PW VARCHAR2(200)  not null,
    USER_NAME VARCHAR2(200)  not null,
    USER_BIRTH TIMESTAMP NOT NULL,
    USER_GENDER VARCHAR2(1)  not null,
    USER_ADDR  VARCHAR2(1)  not null,
    USER_PH1  VARCHAR2(13)  not null
);

--- Date :   20 25 02 18 09 19 30
---        세기  년 월 일 시  분 초
--- timestamp : 2543871523817 : 1970년 1월 1일 0시 1분 1초 1ms : 1
                 ---            1970년 1월 1일 0시 1분 1초 2ms : 2
                 ---            1970년 1월 1일 0시 1분 1초 3ms : 3
--- timestamp => Date
desc members;
alter table members
add (USER_PH2 VARCHAR2(13),
     USER_EMAIL  VARCHAR2(200) not null);
alter table members
add (USER_REGIST  TIMESTAMP DEFAULT sysdate  );

alter table members
modify ( USER_PW VARCHAR2(300),
        USER_EMAIL  null);

alter table members
drop COLUMN USER_EMAIL; -- 여러개의 컬럼은 동시에 삭제 할 수 없다.

ALTER TABLE MEMBERS --- 제약조건 테이블에 만들어진다. 테이블을 삭제하면 제약조건도 삭제된다.
MODIFY (user_num CONSTRAINT user_num_PK PRIMARY KEY ); -- 열레벨

ALTER TABLE MEMBERS
DROP CONSTRAINT user_num_PK;

ALTER TABLE MEMBERS
ADD CONSTRAINT user_num_PK PRIMARY KEY(user_num);

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME= 'MEMBERS';

---- 행  : 튜플 : 레코드
---- 속성 : 컬럼  
---- 속성값 : 인스턴스

ALTER TABLE MEMBERS
MODIFY (USER_ADDR  VARCHAR2(200));

DESC MEMBERS;

/*
user_num     : primary key (MEMBER_user_num_PK)
USER_EMAIL : unique (member_USER_EMAIL_UU)
USER_ID : unique (member_USER_ID_UU)
USER_REGIST  : 디펄트 값은 sysdate
USER_GENDER : M/F만 들어가야한다.
USER_PH1  : 11에서 13자리만 들어가야 한다. (길이)
*/
ALTER TABLE MEMBERS
ADD (USER_EMAIL   VARCHAR2(200));

ALTER TABLE MEMBERS
MODIFY( USER_EMAIL CONSTRAINT member_USER_EMAIL_UU UNIQUE); --열레벨
----
ALTER TABLE MEMBERS
ADD (CONSTRAINT member_USER_EMAIL_UU UNIQUE(USER_EMAIL)
    ,CONSTRAINT member_USER_ID_UU  UNIQUE(USER_ID)); --  테이블 레벨
----
ALTER TABLE MEMBERS
ADD (CONSTRAINT USER_GENDER_CK CHECK(USER_GENDER IN ('F','M')));

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'MEMBERS';

alter table members
add (constraint USER_PH1_ck check (length(USER_PH1) between 11 and 13));

DESC MEMBERS;

select * from members;
-- 회원번호는 mem_100001부터 부여된다.-- USER_num 자동부여
select max(board_num) + 1 from board;

select concat('mem_' , nvl(substr(max(user_num),5), 100000 ) + 1) from members;

select max(user_num) from members;
select substr(max(user_num),5) from members; -- 100001
select nvl(substr(max(user_num),5), 100000) + 1 from members;
select concat('mem_' , nvl(substr(max(user_num),5), 100000) + 1) from members;

--- goods_100001
select concat('goods_' , nvl(substr(max(user_num),7), 100000) + 1) from members;

insert into members 
(USER_num, user_id,USER_PW,USER_NAME,USER_BIRTH,USER_GENDER,USER_ADDR ,USER_PH1,USER_PH2,USER_REGIST,USER_EMAIL)
values((select concat('mem_' , nvl(substr(max(user_num),5), 100000) + 1) from members)
, 'highland5','111111','이숭무','1999-12-12','M','서울','010-1234-1234',null,default,null);

select * from members;


create table aa(
    a1 number ,   ---PK
    a2 number
);
create table bb(
    a1 number,    ---PK/FK
    b1 number,    ---PK
    b2 number
);
alter table aa
add (constraint a1_pk primary key (a1) ); -- 단일 식별자 

alter table bb
add (constraint a1_b1_pk primary key(a1,b1) ); -- 복합 키 ,  복합 식별자

select * from user_cons_columns where table_name = 'BB';
select * from user_cons_columns where table_name = 'AA';

alter table bb
add constraint bb_a1_fk foreign key(a1)
    REFERENCES aa(a1);
/*
alter table bb
add (constraint a1_b1_pk primary key(a1,b1),
     constraint bb_a1_fk foreign key(a1)
      REFERENCES aa(a1)   );
*/
insert into aa(a1,a2)  values(1,1);
insert into bb(a1, b1, b2) values(1,11,22);
--- insert into bb(a1, b1, b2) values(2,11,22);
select * from bb;
--insert into bb(a1, b1, b2) values(1,11,33);
select * from aa;
insert into bb(a1, b1, b2) values(1,12,22);

/*
ALTER TABLE TABLE명 
ADD     (column, constraint)
MODIFY (column명 옵션 )
DROP column 컬럼명
     constraint 제약명
*/

desc bb;
alter table bb
RENAME COLUMN b2 to b3;

---  테이블이름 변경
desc bb;
alter table bb
RENAME to cc;

-- 제약 조건명 변경
alter table bb
rename constraint bb_a1_fk to bb_a11_fk;


----------------------------------------------------------------------
---뷰---
truncate table departments;
insert into departments
select * from hr.departments;

insert into employees
select * from hr.employees;

select employee_id, last_name, salary
from employees
where department_id = 80;


create table vw_emp80
as 
select employee_id, last_name, salary
from employees
where department_id = 80;

select * from vw_emp80;


---- 90부서의 모든 직원을 가져오시오,
select * from employees
where department_id = 90;

create view vw_emp90
as 
select * from employees
where department_id = 90;

select * from vw_emp90;

create view vw_emp_SA_REP
as 
select * from  employees
where job_id = 'SA_REP';

select * from vw_emp_SA_REP;


CREATE OR REPLACE VIEW EMPVU80
AS 
SELECT EMPLOYEE_ID as eid, SALARY as sal, FIRST_NAME as fname, DEPARTMENT_ID as did
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 80;

select * from EMPVU80;

CREATE OR REPLACE VIEW EMPVU80 
(eid, sal , fname, did)
AS 
SELECT EMPLOYEE_ID, SALARY, FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 80;

select * from EMPVU80;
-- 뷰를 생성하거나 수정할 때 모두 CREATE OR REPLACE VIEW 뷰명


--- 직원번호, 이름, 급여 부서번호, 부서명을 출력하시오.
select employee_id, first_name, salary
      ,d.department_id, department_name
from employees e join departments d
on e.department_id = d.department_id;

CREATE OR REPLACE VIEW dep_emp    --- 복합뷰
as 
select employee_id, first_name, salary
      ,d.department_id, department_name
from employees e join departments d
on e.department_id = d.department_id;

select * from dep_emp;

--- 사번, 이름, 직무, 급여, 입사일 , 커미션을 포함한 연봉
--- (year_sal : 연봉은 null이될수 없음) 을 출력할 때
--  직무에 'REP'가 포함된 사원들만 출력하시오.
select employee_id,first_name, job_id, salary, department_id
      , salary * (1 + nvl(commission_pct, 0)) * 12 year_sal
from employees
where job_id like '%REP%';

create or REPLACE view rep_view
as 
select employee_id,first_name, job_id, salary, department_id
      , salary * (1 + nvl(commission_pct, 0)) * 12 year_sal
from employees
where job_id like '%REP%';

select * from rep_view;


create or replace view vw_emp30
as 
select * from employees
where department_id = 30;

select * from vw_emp30;

delete from employees
where department_id = 90;

delete from employees
where employee_id = 114;

select * from employees where department_id = 30;
select * from hr.employees where department_id = 90;
select * from hr.employees where employee_id = 114;
select * from employees where employee_id = 114;

insert into vw_emp30 
values(114, 'Den', 'Raphaely', 'DRAPHEAL', '515.127.4561', '02/12/07', 'PU_MAN', 11000, null
       , 100, 30);

select * from vw_emp30;

update vw_emp30
set hire_date = sysdate 
where employee_id = 114;

select * from vw_emp30;

delete from vw_emp30
where employee_id = 114;

select * from vw_emp30;
--- view 를 통해서 실제 테이블에 dml문을 사용할 수 있다. 
select * from employees where department_id = 90;
select * from  hr.employees where department_id = 90;

select * from vw_emp30; --- 30부서만 출력

insert  into vw_emp30
values(100, 'Steven', 'King', 'SKING', '515.123.4567' ,'03/06/17','AD_PRES',24000, null,null,90);
--- 보이지 않아도 insert는 가능하다.

select * from vw_emp30;

select * from employees;

delete from vw_emp30
where department_id = 90;   --- 보이는 것만 삭제를 할 수 있다.

---- 부서가 50인 사원의 사원번호, 성, 이메일, 입사일, 직무가 보이는 뷰를 만드세요.
--- 뷰명은 emp50vw이다.
create or REPLACE view emp50vw
as
select employee_id, last_name, email, hire_date, job_id
from employees
where department_id = 50;

select * from emp50vw;

insert into emp50vw 
values(300, '장', 'jang', sysdate, 'ST_MAN', 100); --- 값의 수가 너무 많습니다

insert into emp50vw (employee_id, last_name, email, hire_date, job_id)
values(300, '장', 'jang', sysdate, 'ST_MAN'); 


insert into emp50vw(employee_id, last_name, email, hire_date, job_id, manager_id)
values(300, '장', 'jang', sysdate, 'ST_MAN', 100); --- "MANAGER_ID": 부적합한 식별자
-- 보여지는 컬럼에만 값을 저장할 수 있다.

update  emp50vw
set salary = 300; --- "SALARY": 부적합한 식별자 : invalid identifier

--- 보여지는 컬럼에만 DML문을 사용할 수 있다.
-- insert는 뷰를 통해 보여지지 않는 데이터도 저장이 가능하다. 컬럼은 보여지는 컬럼이어야 한다.
update emp50vw
set email = 'aaaa'
where employee_id = 198; -- email은 보여지는 컬럼이므로 수정이 되는 걸 알 수 있다.


--- 각 부서의 급여의 합계, 최소 급여, 최대 급여, 급여의 평균, 부서의 사원수를 출력하시오.
select department_id,sum(salary), min(salary), max(salary) , avg(salary), count(*)
from employees
group by department_id;

create or REPLACE view vw_grp
(did, sum_sal, min_sal, max_sal, avg_sal, cnt) 
as
select department_id,sum(salary), min(salary), max(salary) , avg(salary), count(*)
from employees
group by department_id;

select * from vw_grp;

---단순뷰 일때는 뷰를 통해서 DML이 가능하다. 그럴때 select만 되도록  읽기 전용으로 만들자


create or REPLACE view empvu10
as
select employee_id, last_name, email, hire_date, job_id, department_id
from employees
where department_id = 10;

insert into empvu10 
values(301, '이', 'high', sysdate , 'AD_ASST', 10); -- DML문이 사용 가능하다.

select * from empvu10;

create or REPLACE view empvu10
as
select employee_id, last_name, email, hire_date, job_id, department_id
from employees
where department_id = 10
with read only;

insert into empvu10 
values(302, '이', 'high', sysdate , 'AD_ASST', 10); --- with read only를 했으므로  DML문 사용 못함

--- 뷰에 보이는 것만 DML을 할 수 있게 하자.

select * from empvu10;

create or REPLACE view empvu10
as
select employee_id, last_name, email, hire_date, job_id, department_id
from employees
where department_id = 10
with check option; ---- 뷰를 통해 보이는 데이터만 DML문을 사용할 수 있다.

insert into empvu10 
values(303, '이', 'high1', sysdate , 'AD_ASST', 10);

insert into empvu10 
values(303, '이', 'high2', sysdate , 'AD_ASST', 100);

create or REPLACE view empvu10
as
select employee_id, last_name, email, hire_date, job_id, department_id
from employees
where department_id = 10
with check option  CONSTRAINT empvu30_ck ;

